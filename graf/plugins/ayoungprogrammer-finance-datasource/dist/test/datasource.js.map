{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","quandl_api_key","jsonData","q","t","Promise","resolve","setTimeout","options","retryInterval","datasourceRequest","url","method","headers","then","resp","status","ts","data","dataset","ind","column_names","indexOf","key","datapoints","map","parseFloat","tup","Date","getTime","reverse","obj","target","tick","catch","err","errors","message","quandl_error","reject","that","delay","getTimeSeries","start","range","from","end","to","targets","filter","hide","proms","db","code","format","all","response","title","codes","databases","text","ds","database_code","value","ret","mapToTextValue","result","d","i","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.quandl_api_key = instanceSettings.jsonData.quandl_api_key;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  delay(t) {\n    return new Promise(function(resolve) { \n      setTimeout(resolve, t)\n    });\n  }\n\n  getTimeSeries(options, retryInterval) {\n    return this.backendSrv.datasourceRequest({\n      url: options.url,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n      }\n    }).then(resp => {\n      if (resp.status === 200) {\n        var ts = resp.data.dataset.data;\n        var ind = resp.data.dataset.column_names.indexOf(options.key);\n        if(ind == -1){\n          ind = 1;\n        }\n\n        var datapoints = _.map(ts, tup => {\n            return [parseFloat(tup[ind]), new Date(tup[0]).getTime()]\n        }).reverse();\n\n        var obj = {\n            target: options.tick,\n            datapoints: datapoints\n        }\n\n        return obj;\n      }\n      return null;\n    }).catch(err => {\n        if(err.status == 404 || retryInterval > 10000){\n          var errors = {\n            message: \"Error getting time series\"\n          }\n          if(err.data && err.data.quandl_error){\n            errors = {\n              message: err.data.quandl_error.message\n            };\n          }\n          else if(retryInterval > 10000){\n            var errors = {\n              message: \"Request timed out\"\n            }\n          }\n          return this.q.reject(errors);\n        }\n\n        var that = this;\n        return this.delay(retryInterval).then(function(){\n            return that.getTimeSeries(options, retryInterval * 2);\n        })\n    });\n  }\n\n  query(options) {\n    var start = options.range.from;\n    var end = options.range.to;\n\n    options.targets = options.targets.filter(t => !t.hide);\n\n    var proms = _.map(options.targets, target => {\n        var tick = target.db + '/' + target.code;\n\n        var url = 'https://www.quandl.com/api/v3/datasets/' + tick + '.json?';\n        var key = target.key;\n\n        url = url + 'start_date=' + start.format('YYYY-MM-DD');\n        url = url + '&end_date=' + end.format('YYYY-MM-DD');\n        url = url + '&api_key=' + this.quandl_api_key;\n\n        return this.getTimeSeries({url: url, tick: tick, key: key}, 500);\n    });\n    return Promise.all(proms)\n        .then(data => {\n            return {data: data}\n        })\n  }\n\n\n  testDatasource() {\n    var url = 'https://www.quandl.com/api/v3/databases/codes.json?'\n    url = url + 'api_key=' + this.quandl_api_key;\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options) {\n\n    var url = 'https://www.quandl.com/api/v3/databases/codes.json?'\n    url = url + 'api_key=' + this.quandl_api_key;\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(resp => {\n        var codes = _.map(resp.data.databases, ds => {\n            return {text: ds.database_code, value: ds.database_code};\n        });\n        var ret = this.mapToTextValue(codes);\n        return ret;\n    });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n}\n"]}