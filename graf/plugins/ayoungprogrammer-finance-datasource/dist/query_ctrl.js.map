{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","console","log","target","key","db","split","code","onChangeInternal","datasource","metricFindQuery","then","transformToSegments","Promise","all","rawQuery","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;4CAGKC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA8C;AAAA;;AAAA,8JACtCF,MADsC,EAC9BC,SAD8B;;AAG5C,gBAAKE,KAAL,GAAaH,MAAb;AACA,gBAAKE,YAAL,GAAoBA,YAApB;AACAE,kBAAQC,GAAR,CAAY,MAAKC,MAAjB;AACA,gBAAKA,MAAL,CAAYC,GAAZ,GAAkB,MAAKD,MAAL,CAAYC,GAAZ,IAAmB,EAArC;AACA,gBAAKD,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,WAA3C;AACA,gBAAKA,MAAL,CAAYE,EAAZ,GAAiB,MAAKF,MAAL,CAAYA,MAAZ,CAAmBG,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,KAAoC,MAArD;AACA,gBAAKH,MAAL,CAAYI,IAAZ,GAAmB,MAAKJ,MAAL,CAAYA,MAAZ,CAAmBG,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,KAAoC,MAAvD;AACA,gBAAKE,gBAAL;AAV4C;AAW7C;;;;uCAEY;AACX,mBAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAgC,KAAKP,MAArC,EACJQ,IADI,CACC,KAAKZ,YAAL,CAAkBa,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;2CAEgB;AACf,mBAAOC,QAAQC,GAAR,CAAY,EAAZ,CAAP;AACD;;;6CAEkB;AACjB,iBAAKX,MAAL,CAAYY,QAAZ,GAAuB,CAAC,KAAKZ,MAAL,CAAYY,QAApC;AACD;;;6CAEkB;AACjB,iBAAKZ,MAAL,CAAYA,MAAZ,GAAqB,KAAKA,MAAL,CAAYE,EAAZ,GAAiB,GAAjB,GAAuB,KAAKF,MAAL,CAAYI,IAAxD;AACA,iBAAKS,SAAL,CAAeC,OAAf,GAFiB,CAES;AAC3B;;;;QAhC6CtB,S;;;;AAmChDC,iCAA2BsB,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    console.log(this.target);\n    this.target.key = this.target.key || '';\n    this.target.target = this.target.target || 'LBMA/GOLD';\n    this.target.db = this.target.target.split('/')[0] || 'LBMA';\n    this.target.code = this.target.target.split('/')[1] || 'GOLD';\n    this.onChangeInternal();\n  }\n\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  getCodeOptions() {\n    return Promise.all([])\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.target.target = this.target.db + '/' + this.target.code;\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';"]}